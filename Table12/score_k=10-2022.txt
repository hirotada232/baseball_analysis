###Steps in score.
#【閾値3.0の場合】
a <- read.csv('data_inning_score3.0.csv')

####Dummy variable.
a2 <- data.frame(a=factor(a[,2]))
a2 <- cbind(a[,1],a2,a[,3:ncol(a)])

colnames(a2) <- colnames(a)

library(makedummies)
b=makedummies(a2)

datall <- b[,c(1:10,15:17)]

#####
#2022 Spring and Summer

datall <- datall[1388:2786,]


summary(datall)
head(datall)
#####
library(MASS)
library(MatchIt)
##########

k=10

m.out1 <- matchit(pre_pinch_result ~ first_hitter_2+first_hitter_3+first_hitter_4+first_hitter_5+first_hitter_6+first_hitter_7+first_hitter_8+first_hitter_9+inning,data=datall,replace=TRUE,distance="glm",method="nearest",ratio=k)
m.data1 <- match.data(m.out1)

####################################################3
##model3
####################################################3
model_poisson1 <- glm(score_num ~ pre_pinch_result+first_hitter_2+first_hitter_3+first_hitter_4+first_hitter_5+first_hitter_6+first_hitter_7+first_hitter_8+first_hitter_9+inning, family="poisson", data=m.data1)
AIC(model_poisson1)



###
# DHARMaによるシミュレーション残差の生成
library(DHARMa)
testDispersion(model_poisson1)
simulationOutput <- simulateResiduals(fittedModel = model_poisson1)
plot(simulationOutput)

###
par(mfrow=c(1,2))
testDispersion(simulationOutput)
plotResiduals(simulationOutput,datall$score_nmu)

testZeroInflation(simulationOutput)

####################################################3
##model4
####################################################3

model_poisson2 <- glm(score_num ~ pre_pinch_result+inning, family="poisson", data=m.data1)
AIC(model_poisson2)

###
# DHARMaによるシミュレーション残差の生成
library(DHARMa)
testDispersion(model_poisson2)
simulationOutput <- simulateResiduals(fittedModel = model_poisson2)
plot(simulationOutput)

###
par(mfrow=c(1,2))
testDispersion(simulationOutput)
plotResiduals(simulationOutput,datall$score_nmu)

testZeroInflation(simulationOutput)


####################################################3
##model3'
####################################################3

library(MASS)

#with first_hitter
model_nb1 <- glm.nb(score_num ~ pre_pinch_result+first_hitter_2+first_hitter_3+first_hitter_4+first_hitter_5+first_hitter_6+first_hitter_7+first_hitter_8+first_hitter_9+inning, data=m.data1)
summary(model_nb1)
AIC(model_nb1)

###
# DHARMaによるシミュレーション残差の生成
library(DHARMa)
testDispersion(model_nb1)
simulationOutput <- simulateResiduals(fittedModel = model_nb1)
testZeroInflation(simulationOutput)

####################################################3
##model4'
####################################################3

model_nb2 <- glm.nb(score_num ~ pre_pinch_result+inning, data=m.data1)
summary(model_nb2)
AIC(model_nb2)
###
# DHARMaによるシミュレーション残差の生成
library(DHARMa)
testDispersion(model_nb2)
simulationOutput <- simulateResiduals(fittedModel = model_nb2)
testZeroInflation(simulationOutput)

plot(simulationOutput)




################
##Power analysis.

library(glmmTMB)
library(DHARMa)
library(MASS)  # glm.nb() を使うために必要

set.seed(123)

# ---- 1. 負の二項回帰モデルの適用 ----
model_nb2 <- glm.nb(score_num ~ pre_pinch_result+inning, data=m.data1)

#model_nb1 <- glm.nb(score_num ~ pre_pinch_result + first_hitter_2 + first_hitter_3 + 
#                     first_hitter_4 + first_hitter_5 + first_hitter_6 + first_hitter_7 + 
#                     first_hitter_8 + first_hitter_9 + inning, data = m.data1)

# ---- 2. DHARMa を使ってシミュレーション ----
sim_res <- simulateResiduals(fittedModel = model_nb2, n = 1000)

# ---- 3. シミュレーションの分布をチェック ----
plot(sim_res)

# ---- 4. シミュレーションデータを使い、繰り返しモデルをフィット ----
n_sim <- 1000  # シミュレーション回数
p_values <- numeric(n_sim)  # p値を保存

for (i in 1:n_sim) {
  # DHARMa のシミュレーションデータを取得
  m.data1$score_num_sim <- recalculateResiduals(sim_res)$simulatedResponse[, i]  
  
  # 負の二項回帰モデルを適用
  model_sim <- glm.nb(score_num_sim ~ pre_pinch_result + inning, data = m.data1)
  
  # p値を保存
  p_values[i] <- coefficients(summary(model_sim))["pre_pinch_result", "Pr(>|z|)"]
}

# p値の分布を確認
hist(p_values)
mean(p_values < 0.05)  # 検出力

# パワーを計算（p < 0.05 の割合）
power <- mean(p_values < 0.05)
print(paste("推定パワー: ", round(power, 3)))
